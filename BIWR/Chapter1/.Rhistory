?distinct
# this package will allow us to interpolate between missing time series values
require(zoo)
# these packages provide functions for easy data wrangling
require(dplyr)
require(reshape2)
# this package provides automated forecasting of time series data
require(forecast)
# this package allows us to create publication-quality plots
require(ggplot2)
# this package allows creation of javascript widgets for use in webpages
require(htmlwidgets)
# this package uses htmlwidgets to make series widgets
require(dygraphs)
# read the data into R
# NAs are represented by blanks and ? in this data, so I need to change that
power <- read.table("Data/household_power_consumption.txt", sep = ";", header = T, na.strings = c("?",""), stringsAsFactors = FALSE)
# set the working directory
setwd("~/BIWR/Chapter1")
# read the data into R
# NAs are represented by blanks and ? in this data, so I need to change that
power <- read.table("Data/household_power_consumption.txt", sep = ";", header = T, na.strings = c("?",""), stringsAsFactors = FALSE)
str(power)
# The Date and Time variables are read in as characters, I'll convert them to date and time classes, as well  as create a  new DateTime column
# Convert the character date into ISO date
power$Date <- as.Date(power$Date, format = "%d/%m/%Y")
# create a DateTime object
power$DateTime <- as.POSIXct(paste(power$Date, power$Time))
# obtain the Month and Year for each data point
power$Month <- format(power$Date, "%Y-%m")
str(power)
# add the first to each Y-m combo and convert back to ISO Date
power$Month <- as.Date(paste0(power$Month, "-01"))
# verify the changes
str(power)
# get an overview of the variables
summary(power)
# use ifelse to count each minute that is NA
power$Missing <- ifelse(is.na(power$Global_active_power), 1, 0)
# use dplyr's group_by function to group the data by Date
power_group_day <- group_by(power, Date)
# use dplyr's summarize function to summarize by our NA indicator
# (where 1 = 1 minute with NA)
power_day_missing <- summarize(power_group_day, Count_Missing = sum(Missing))
# download the 'calendarHeat' function from revolutionanalytics.com
source("http://blog.revolutionanalytics.com/downloads/calendarHeat.R")
# plot the calendar graph to view the missing data pattern
calendarHeat(power_day_missing$Date, power_day_missing$Count_Missing, varname = "Missing Data", color = "w2b")
# Use zoo to perform interpolation for missing series values
power$Global_active_power_locf <- na.locf(power$Global_active_power)
# Compare the original and interpolated distributions by
# reshaping the two variables into long form for ggplot
power_long <- melt(power, id.vars = "DateTime", measure.vars = c("Global_active_power", "Global_active_power_locf"))
# create density plot
ggplot(power_long, aes(value, fill=variable, color=variable)) +
geom_density(alpha = 0.75) +
facet_wrap(~variable)
# save density plot to Results folder
# note that ggsave used 'dpi' to set image resolution
ggsave("Results/density_plot.png", width = 6, height = 4, dpi = 600, units = "in")
# use dplyr to get monthly max demand and total user results
power_monthly <- summarise(power_group,
Max_Demand_kW = max(Global_active_power_locf),
Total_Use_kWh = sum(Global_active_power_locf)/60)
# use dplyr to group by month
power_group <- group_by(power, Month)
# use dplyr to get monthly max demand and total user results
power_monthly <- summarise(power_group,
Max_Demand_kW = max(Global_active_power_locf),
Total_Use_kWh = sum(Global_active_power_locf)/60)
# remove partial months from data frame
power_monthly <- power_monthly[2:47,]
# convert month to date
power_monthly$Month <- as.Date(paste0(power_monthly$Month, "-01"))
# look at the structure of the result
str(power_monthly)
# create a plot of total use by month
ggplot(power_monthly, aes(Month, Total_Use_kWh)) +
geom_line(col = "blue", lwd = 1)
# save the result as hi-res png to Results subfolder
ggsave("Results/total_use_plot.png", width = 6, height = 4, dpi = 600, units = "in")
# create a time series object of monthly total use
total_use_ts <- ts(power_monthly$Total_Use_kWh, start = c(2007, 1), frequency = 12)
# automatically obtain the forecast for the next 6 months
# using the forecast package's forecast function
# see ?forecast for more details
total_use_fc <- forecast(total_use_ts, h = 6)
# view the forecast model results
summary(total_use_fc)
# export a copy of the model results into a text file in the Results folder
sink("Results/Forecast_Model.txt")
summary(total_use_fc)
sink()
# view the forecast plot
plot(total_use_fc)
# save the base graphics plot to the Results folder
# note that resolution is called 'res' here
png("Results/total_use_forecast.png", width = 6, height = 4, res = 600, units = "in")
plot(total_use_fc)
dev.off()
# CREATE INTERACTIVE HTML PLOT
# create a data frame with the original data
# and placeholders for the forecast details
use_df <- data.frame(Total_Use = power_monthly$Total_Use_kWh,
Forecast = NA, Upper_80 = NA,
Lower_80 = NA, Upper_95 = NA, Lower_95 = NA)
# create a data frame for the forecast details
# with placeholder column for the original data
use_fc <- data.frame(Total_Use = NA, Forecast = total_use_fc$mean,
Upper_80 = total_use_fc$upper[,1], Lower_80 = total_use_fc$lower[,1],
Upper_95 = total_use_fc$upper[,2], Lower_95 = total_use_fc$lower[,2])
# union the two data frames into one using rbind
uses_ts_fc <- rbind(use_df, use_fc)
# create a time series of the data and forecast results
total_use_forecast <- ts(use_ts_fc, start = c(2007, 1), freq = 12)
# union the two data frames into one using rbind
use_ts_fc <- rbind(use_df, use_fc)
# create a time series of the data and forecast results
total_use_forecast <- ts(use_ts_fc, start = c(2007, 1), freq = 12)
# create the widget
energy_use_prediction_widget <- dygraph(total_use_forecast,
main = "Predicted Monthly Electricity Use (kWh)",
ylab = "Total kWh", width = 900, height = 500) %>%
dySeries(c("Total_Use"), label = "Actual kWh Usage") %>%
dyEvent(x = "2008-08-01", "Went on vacation", labelLoc = "top") %>%
dyRangeSelector(dateWindow = c("2008-08-15", "2011-06-01")) %>%
dyLegend(width = 800)
# display the widget in the Viewer window
# hit the Zoom button for a pop-out
energy_use_prediction_widget
# save the widget as a stand-alone HTML file to Results folder
saveWidget(energy_use_prediction_widget, "energy_use_prediction_widget.html")
